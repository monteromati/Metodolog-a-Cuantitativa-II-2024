install.packages("haven")    # Paquete para importar datos en formato SPSS
install.packages("ggplot2")  # Paquete para generar gráficos
install.packages("gmodels")  # Paquete que contiene la función CrossTable() para pruebas de Chi-Cuadrado
install.packages("psych")    # Paquete para obtener estadísticos descriptivos más detallados
install.packages("pastecs")  # Paquete para análisis estadístico básico
install.packages("effsize")
library(haven)
library(ggplot2)
library(gmodels)
library(psych)
library(pastecs)
library(effsize)
getwd()  # Verifica el directorio de trabajo actual
getwd()  # Verifica el directorio de trabajo actual
# Cambia el directorio de trabajo al lugar donde se guardaron los datos
setwd("G:/Mi unidad/Teaching/Metodología Cuantitativa II 2024/Sesión 2")
getwd()  # Confirma que el directorio de trabajo ha cambiado
pisa2009_chl <- read_sav("pisa2009_chl.sav")
View(pisa2009_chl)  # Visualiza la base de datos en una nueva ventana
class(pisa2009_chl)    # Verifica la clase del objeto 'pisa2009_chl'
head(pisa2009_chl)     # Muestra los primeros 6 casos de la base de datos
names(pisa2009_chl)    # Lista los nombres de las variables
dim(pisa2009_chl)      # Muestra el número de variables y casos
summary(pisa2009_chl)  # Proporciona un resumen estadístico para cada variable
str(pisa2009_chl)      # Muestra la estructura interna del data frame
# Tabla de contingencia para una variable categórica
table(pisa2009_chl$sex)  # Distribución de género
table(pisa2009_chl$type) # Distribución por tipo de establecimiento
# Tabla de contingencia para dos variables categóricas
table(pisa2009_chl$type, pisa2009_chl$sex)  # Distribución conjunta de género y tipo de establecimiento
# Tabla de porcentajes para variables categóricas por grupo de interés
# "margin = 2" entrega las proporciones de la distribución condicional de la variable 1 según la variable 2
prop.table(table(pisa2009_chl$type, pisa2009_chl$sex), margin = 2)
# Gráfico de Barras para la variable 'sex'
plot <- as.data.frame(table(pisa2009_chl$sex))
ggplot(plot, aes(x = Var1, y = Freq)) +
geom_bar(stat = "identity")
# Gráfico de Barras para la variable 'type'
plot <- as.data.frame(table(pisa2009_chl$type))
ggplot(plot, aes(x = Var1, y = Freq)) +
geom_bar(stat = "identity")
# Gráfico Circular para la variable 'sex'
plot <- as.data.frame(table(pisa2009_chl$sex))
ggplot(plot, aes(x = "", y = Freq, fill = Var1)) +
geom_bar(stat = "identity", color = "white") +
coord_polar("y", start = 0) +
theme_void()
# Gráfico Circular para la variable 'type'
plot <- as.data.frame(table(pisa2009_chl$type))
ggplot(plot, aes(x = "", y = Freq, fill = Var1)) +
geom_bar(stat = "identity", color = "white") +
coord_polar("y", start = 0) +
theme_void()
# Generación de la tabla de contingencia con la función CrossTable
tabla <- CrossTable(pisa2009_chl$type, pisa2009_chl$sex, prop.chisq = FALSE)
# Guardamos las proporciones por columna
propcol <- tabla$prop.col
# Gráfico de Barras Condicional: Visualización de las proporciones condicionales
barplot(propcol, beside = TRUE, col = rainbow(3), ylim = c(0, 1))
legend('topright', c("Public", "Private government-dependent", "Private independent"), pch = 15, col = rainbow(3), cex = 0.7)
CrossTable(pisa2009_chl$type, pisa2009_chl$sex, prop.chisq = FALSE, chisq = TRUE, expected = TRUE, sresid = TRUE, format = "SPSS")
pisa2009_chl$ses <- as.numeric(pisa2009_chl$ses)  # Convierte estatus socioeconómico a numérico
pisa2009_chl$sex <- as.numeric(pisa2009_chl$sex)  # Convierte sexo a numérico
# Estadísticos básicos
summary(pisa2009_chl$ses)  # Resumen descriptivo de estatus socioeconómico
sd(pisa2009_chl$ses, na.rm = TRUE)  # Desviación estándar de estatus socioeconómico
var(pisa2009_chl$ses, na.rm = TRUE)  # Varianza de estatus socioeconómico
# Estadísticos descriptivos más detallados utilizando el paquete 'psych'
describe(pisa2009_chl$ses)
by(pisa2009_chl$ses, pisa2009_chl$sex, summary)
# Histograma de estatus socioeconómico
ggplot(pisa2009_chl, aes(x = ses)) +
geom_histogram()
# Gráfico de Densidad de estatus socioeconómico
ggplot(pisa2009_chl, aes(x = ses)) +
geom_density()
# Histograma y Densidad combinados
ggplot(pisa2009_chl, aes(x = ses)) +
geom_histogram(aes(y = ..density..)) +
geom_density()
# Histograma de la variable 'math' como comparación
ggplot(pisa2009_chl, aes(x = math)) +
geom_histogram()
# Gráfico cuartil-cuartil (Q-Q plot) para estatus socioeconómico
qqnorm(pisa2009_chl$ses, main = 'Gráfico Cuartil-Cuartil')
qqline(pisa2009_chl$ses)
# Prueba de normalidad Shapiro-Wilk para los primeros 5000 casos de estatus socioeconómico
shapiro.test(pisa2009_chl$ses[0:5000])
prueba_u <- wilcox.test(pisa2009_chl$ses, pisa2009_chl$sex, paired = FALSE)
prueba_u
by(pisa2009_chl$ses, pisa2009_chl$type, summary)
d_cohen <- cohen.d(pisa2009_chl$math ~ pisa2009_chl$sex)
round(d_cohen, 3)
d_cohen <- cohen.d(pisa2009_chl$math ~ pisa2009_chl$sex)
d_cohen
round(cor(pisa2009_chl[, 7:9]), digits = 2)  # Redondea a dos decimales
r2 <- r$estimate * r$estimate
r <- cor.test(pisa2009_chl$math, pisa2009_chl$read, method = "pearson")
r
r2 <- r$estimate * r$estimate
r2
round(cor(pisa2009_chl[, 7:9]), digits = 2)  # Redondea a dos decimales
pairs(pisa2009_chl$math ~ pisa2009_chl$read)
# Gráfico más detallado utilizando ggplot2
ggplot(pisa2009_chl) +
aes(x = math, y = read) +
geom_point(colour = "#0c4c8a") +
theme_minimal()
res_an <- aov(pisa2009_chl$math ~ pisa2009_chl$type)
summary(res_an)
boxplot(pisa2009_chl$math ~ pisa2009_chl$type,
xlab = "Dependencia", ylab = "Puntaje Pisa Mat")
ind.t.test <- t.test(pisa2009_chl$math ~ pisa2009_chl$sex, paired = FALSE, var.equal = T)
# Histograma
ggplot(pisa2009_chl, aes(x=math)) +
geom_histogram()
# Gráfico Cuartil-Cuartil (Q-Q plot):
qqnorm(pisa2009_chl$math, main='Gráfico Cuartil-Cuartil')
qqline(pisa2009_chl$math)
# Prueba de Shapiro-Wilk
shapiro.test(pisa2009_chl$math[0:5000])
ind.t.test <- t.test(pisa2009_chl$math ~ pisa2009_chl$sex, paired = FALSE, var.equal = T)
ind.t.test <- t.test(pisa2009_chl$math ~ pisa2009_chl$sex, var.equal = T)
ind.t.test
# Histograma
ggplot(pisa2009_chl, aes(x=math)) +
geom_histogram()
# Gráfico Cuartil-Cuartil (Q-Q plot):
qqnorm(pisa2009_chl$math, main='Gráfico Cuartil-Cuartil')
qqline(pisa2009_chl$math)
# Prueba de Shapiro-Wilk
shapiro.test(pisa2009_chl$math[0:5000])
describe(pisa2009_chl$math)
summary(pisa2009_chl$math)
sd(pisa2009_chl$math)
var(pisa2009_chl$math)
cor.test(pisa2009_chl$ses, pisa2009_chl$math, method = "spearman", exact = FALSE)
# Visualización mediante un diagrama de dispersión (scatter plot)
pairs(pisa2009_chl$ses ~ pisa2009_chl$math)  # Muestra un gráfico de correlación básico
# Gráfico más detallado utilizando ggplot2
ggplot(pisa2009_chl) +
aes(x = ses, y = math) +
geom_point(colour = "#0c4c8a") +
theme_minimal()
kruskal.test(pisa2009_chl$ses ~ pisa2009_chl$type)
by(pisa2009_chl$ses, pisa2009_chl$type, summary)
prueba_u <- wilcox.test(pisa2009_chl$ses, pisa2009_chl$sex, paired = FALSE)
prueba_u
# Prueba de normalidad Shapiro-Wilk para los primeros 5000 casos de estatus socioeconómico
shapiro.test(pisa2009_chl$ses[0:5000])
# Gráfico cuartil-cuartil (Q-Q plot) para estatus socioeconómico
qqnorm(pisa2009_chl$ses, main = 'Gráfico Cuartil-Cuartil')
qqline(pisa2009_chl$ses)
# Histograma de estatus socioeconómico
ggplot(pisa2009_chl, aes(x = ses)) +
geom_histogram()
# Gráfico de Densidad de estatus socioeconómico
ggplot(pisa2009_chl, aes(x = ses)) +
geom_density()
# Histograma y Densidad combinados
ggplot(pisa2009_chl, aes(x = ses)) +
geom_histogram(aes(y = ..density..)) +
geom_density()
# Histograma de la variable 'math' como comparación
ggplot(pisa2009_chl, aes(x = math)) +
geom_histogram()
by(pisa2009_chl$ses, pisa2009_chl$sex, summary)
# Estadísticos básicos
summary(pisa2009_chl$ses)  # Resumen descriptivo de estatus socioeconómico
sd(pisa2009_chl$ses, na.rm = TRUE)  # Desviación estándar de estatus socioeconómico
var(pisa2009_chl$ses, na.rm = TRUE)  # Varianza de estatus socioeconómico
# Estadísticos descriptivos más detallados utilizando el paquete 'psych'
describe(pisa2009_chl$ses)
pisa2009_chl$ses <- as.numeric(pisa2009_chl$ses)  # Convierte estatus socioeconómico a numérico
pisa2009_chl$sex <- as.numeric(pisa2009_chl$sex)  # Convierte sexo a numérico
CrossTable(pisa2009_chl$type, pisa2009_chl$sex, prop.chisq = FALSE, chisq = TRUE, expected = TRUE, sresid = TRUE, format = "SPSS")
# Generación de la tabla de contingencia con la función CrossTable
tabla <- CrossTable(pisa2009_chl$type, pisa2009_chl$sex, prop.chisq = FALSE)
# Guardamos las proporciones por columna
propcol <- tabla$prop.col
# Gráfico de Barras Condicional: Visualización de las proporciones condicionales
barplot(propcol, beside = TRUE, col = rainbow(3), ylim = c(0, 1))
legend('topright', c("Public", "Private government-dependent", "Private independent"), pch = 15, col = rainbow(3), cex = 0.7)
# Gráfico de Barras para la variable 'sex'
plot <- as.data.frame(table(pisa2009_chl$sex))
ggplot(plot, aes(x = Var1, y = Freq)) +
geom_bar(stat = "identity")
# Gráfico de Barras para la variable 'type'
plot <- as.data.frame(table(pisa2009_chl$type))
ggplot(plot, aes(x = Var1, y = Freq)) +
geom_bar(stat = "identity")
# Gráfico Circular para la variable 'sex'
plot <- as.data.frame(table(pisa2009_chl$sex))
ggplot(plot, aes(x = "", y = Freq, fill = Var1)) +
geom_bar(stat = "identity", color = "white") +
coord_polar("y", start = 0) +
theme_void()
# Gráfico Circular para la variable 'type'
plot <- as.data.frame(table(pisa2009_chl$type))
ggplot(plot, aes(x = "", y = Freq, fill = Var1)) +
geom_bar(stat = "identity", color = "white") +
coord_polar("y", start = 0) +
theme_void()
# Tabla de contingencia para una variable categórica
table(pisa2009_chl$sex)  # Distribución de género
table(pisa2009_chl$type) # Distribución por tipo de establecimiento
# Tabla de contingencia para dos variables categóricas
table(pisa2009_chl$type, pisa2009_chl$sex)  # Distribución conjunta de género y tipo de establecimiento
# Tabla de porcentajes para variables categóricas por grupo de interés
# "margin = 2" entrega las proporciones de la distribución condicional de la variable 1 según la variable 2
prop.table(table(pisa2009_chl$type, pisa2009_chl$sex), margin = 2)
class(pisa2009_chl)    # Verifica la clase del objeto 'pisa2009_chl'
head(pisa2009_chl)     # Muestra los primeros 6 casos de la base de datos
names(pisa2009_chl)    # Lista los nombres de las variables
dim(pisa2009_chl)      # Muestra el número de variables y casos
summary(pisa2009_chl)  # Proporciona un resumen estadístico para cada variable
str(pisa2009_chl)      # Muestra la estructura interna del data frame
pisa2009_chl <- read_sav("pisa2009_chl.sav")
View(pisa2009_chl)  # Visualiza la base de datos en una nueva ventana
pisa2009_chl <- read_sav("pisa2009_chl.sav")
View(pisa2009_chl)  # Visualiza la base de datos en una nueva ventana
res_an <- aov(pisa2009_chl$math ~ pisa2009_chl$type)
summary(res_an)
summary(res_an)
pisa2009_chl <- read_sav("pisa2009_chl.sav")
View(pisa2009_chl)  # Visualiza la base de datos en una nueva ventana
library(openxlsx)
write.xlsx(pisa2009_chl, file = "pisa2009_chl.xlsx")
getwd()
# Generación de la tabla de contingencia con la función CrossTable
tabla <- CrossTable(pisa2009_chl$type, pisa2009_chl$sex, prop.chisq = FALSE)
# Guardamos las proporciones por columna
propcol <- tabla$prop.col
# Gráfico de Barras Condicional: Visualización de las proporciones condicionales
barplot(propcol, beside = TRUE, col = rainbow(3), ylim = c(0, 1))
legend('topright', c("Public", "Private government-dependent", "Private independent"), pch = 15, col = rainbow(3), cex = 0.7)
CrossTable(pisa2009_chl$type, pisa2009_chl$sex, prop.chisq = FALSE, chisq = TRUE, expected = TRUE, sresid = TRUE, format = "SPSS")
pisa2009_chl$ses <- as.numeric(pisa2009_chl$ses)  # Convierte estatus socioeconómico a numérico
pisa2009_chl$sex <- as.numeric(pisa2009_chl$sex)  # Convierte sexo a numérico
# Estadísticos básicos
summary(pisa2009_chl$ses)  # Resumen descriptivo de estatus socioeconómico
sd(pisa2009_chl$ses, na.rm = TRUE)  # Desviación estándar de estatus socioeconómico
var(pisa2009_chl$ses, na.rm = TRUE)  # Varianza de estatus socioeconómico
# Estadísticos descriptivos más detallados utilizando el paquete 'psych'
describe(pisa2009_chl$ses)
kruskal.test(pisa2009_chl$ses ~ pisa2009_chl$type)
ind.t.test <- t.test(pisa2009_chl$math ~ pisa2009_chl$sex, var.equal = T)
ind.t.test
pisa2009_chl$sex
d_cohen <- cohen.d(pisa2009_chl$math ~ pisa2009_chl$sex)
d_cohen
r <- cor.test(pisa2009_chl$math, pisa2009_chl$read, method = "pearson")
r
round(cor(pisa2009_chl[, 7:9]), digits = 2)  # Redondea a dos decimales
